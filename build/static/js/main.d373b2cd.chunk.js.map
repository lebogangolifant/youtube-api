{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["require","config","App","React","useState","query","setQuery","list","setList","className","onSubmit","e","preventDefault","searchYouTube","then","autoFocus","value","onChange","target","length","map","item","href","link","title","description","author","ref","name","views","duration","uploaded_at","alt","src","thumbnail","id","q","a","encodeURIComponent","fetch","method","headers","process","response","json","body","console","log","items","filter","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAGAA,EAAQ,GAAUC,SAElB,IAkDeC,EAlDH,WAAO,IAAD,EACUC,IAAMC,SAAS,gBADzB,mBACTC,EADS,KACFC,EADE,OAEQH,IAAMC,SAAS,MAFvB,mBAETG,EAFS,KAEHC,EAFG,KAShB,OACE,sBAAKC,UAAU,MAAf,UACE,+DACA,uBAAMC,SARK,SAACC,GACdA,EAAEC,iB,2CACFC,CAAcR,GAAOS,KAAKN,IAMxB,UACE,uBACEO,WAAS,EACTC,MAAOX,EACPY,SAAU,SAACN,GAAD,OAAOL,EAASK,EAAEO,OAAOF,UAErC,uDAEDT,IACkB,IAAhBA,EAAKY,OACJ,2CAEA,oBAAIV,UAAU,QAAd,SACGF,EAAKa,KAAI,SAACC,GAAD,OACR,qBAAIZ,UAAU,OAAd,UACE,gCACE,4BACE,mBAAGa,KAAMD,EAAKE,KAAd,SAAqBF,EAAKG,UAE5B,4BAAIH,EAAKI,iBAEX,qBAAIhB,UAAU,OAAd,UACE,sCACM,mBAAGa,KAAMD,EAAKK,OAAOC,IAArB,SAA2BN,EAAKK,OAAOE,UAE7C,yCAAYP,EAAKQ,SACjB,4CAAeR,EAAKS,YACpB,4CAAeT,EAAKU,kBAEtB,qBAAKC,IAAI,GAAGC,IAAKZ,EAAKa,cAfEb,EAAKc,c,4CA0B7C,WAA6BC,GAA7B,iBAAAC,EAAA,6DACED,EAAIE,mBAAmBF,GADzB,SAEyBG,MACrB,mEAAqEH,EACrE,CACEI,OAAQ,MACRC,QAAS,CACP,kBAAmB,wCACnB,iBAAkBC,wDAR1B,cAEQC,EAFR,gBAYqBA,EAASC,OAZ9B,cAYQC,EAZR,OAaEC,QAAQC,IAAIF,GAbd,kBAcSA,EAAKG,MAAMC,QAAO,SAAC5B,GAAD,MAAwB,UAAdA,EAAK6B,SAd1C,4C,sBADAlD,EAAQ,GAAUC,SCxDlB,IAYekD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvC,MAAK,YAAkD,IAA/CwC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d373b2cd.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nrequire('dotenv').config();\n\nconst App = () => {\n  const [query, setQuery] = React.useState('Space Travel');\n  const [list, setList] = React.useState(null);\n\n  const search = (e) => {\n    e.preventDefault();\n    searchYouTube(query).then(setList);\n  };\n\n  return (\n    <div className='app'>\n      <h1>SEARCH YOUTUBE VIDEO BY TOPIC</h1>\n      <form onSubmit={search}>\n        <input\n          autoFocus\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n        />\n        <button>Search YouTube</button>\n      </form>\n      {list &&\n        (list.length === 0 ? (\n          <p>No results</p>\n        ) : (\n          <ul className='items'>\n            {list.map((item) => (\n              <li className='item' key={item.id}>\n                <div>\n                  <b>\n                    <a href={item.link}>{item.title}</a>\n                  </b>\n                  <p>{item.description}</p>\n                </div>\n                <ul className='meta'>\n                  <li>\n                    By: <a href={item.author.ref}>{item.author.name}</a>\n                  </li>\n                  <li>Views: {item.views}</li>\n                  <li>Duration: {item.duration}</li>\n                  <li>Uploaded: {item.uploaded_at}</li>\n                </ul>\n                <img alt='' src={item.thumbnail} />\n              </li>\n            ))}\n          </ul>\n        ))}\n    </div>\n  );\n};\n\nexport default App;\nrequire('dotenv').config();\nasync function searchYouTube(q) {\n  q = encodeURIComponent(q);\n  const response = await fetch(\n    'https://youtube-search-results.p.rapidapi.com/youtube-search/?q=' + q,\n    {\n      method: 'GET',\n      headers: {\n        'x-rapidapi-host': 'youtube-search-results.p.rapidapi.com',\n        'x-rapidapi-key': process.env.REACT_APP_API_KEY,\n      },\n    }\n  );\n  const body = await response.json();\n  console.log(body);\n  return body.items.filter((item) => item.type === 'video');\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}